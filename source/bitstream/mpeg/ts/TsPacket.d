
/*****************************************************************************
 * ISO/IEC 13818-1 Transport Stream
 *****************************************************************************
 * Copyright (C) 2009-2010 VideoLAN
 *
 * Authors: Christophe Massiot <massiot@via.ecp.fr>
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject
 * to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *****************************************************************************/

/*
 * Normative references:
 *	- ISO/IEC 13818-1:2007(E) (MPEG-2 systems)
 */

module bitstream.mpeg.ts.TsPacket;

import std.algorithm;
import std.exception;
import std.stdio;
import std.stdint;

private const TS_SIZE = 188;
private const TS_HEADER_SIZE = 4;
private const TS_HEADER_SIZE_AF = 6;
private const TS_HEADER_SIZE_PCR = 12;

class TsPacket
{
	ubyte[] _data;

	this()
	{
		_data.length = 188;
		_data[0] = 0x47;
		_data[1] = 0x0;
		_data[2] = 0x0;
		_data[3] = 0x0;
	}

	this(ubyte[] data)
	{
		enforce(data.length == 188, "invalid length of TsPacket");

		_data = data;
	}

	this(immutable(ubyte[]) data) immutable
	{
		enforce(data.length == 188, "invalid length of TsPacket");

		_data = data;
	}

	void set_transporterror()
	{
		_data[1] |= 0x80;
	}

	bool transporterror() const @property
	{
		return !!(_data[1] & 0x80);
	}

	void set_unitstart()
	{
		_data[1] |= 0x40;
	}

	bool unitstart() const @property
	{
		return !!(_data[1] & 0x40);
	}

	void set_transportpriority()
	{
		_data[1] |= 0x20;
	}

	bool transportpriority() const @property
	{
		return !!(_data[1] & 0x20);
	}

	void set_pid(uint16_t i_pid)
	{
		_data[1] &= ~0x1f;
		_data[1] |= (i_pid >> 8) & 0x1f;
		_data[2] = i_pid & 0xff;
	}

	uint16_t pid() const @property
	{
		return ((_data[1] & 0x1f) << 8) | _data[2];
	}

	void set_cc(ubyte i_cc)
	{
		_data[3] &= ~0xf;
		_data[3] |= (i_cc & 0xf);
	}

	ubyte cc() const @property
	{
		return _data[3] & 0xf;
	}

	void set_payload()
	{
		_data[3] |= 0x10;
	}

	bool has_payload() const
	{
		return !!(_data[3] & 0x10);
	}

	void set_adaptation(ubyte i_length)
	{
		_data[3] |= 0x20;
		_data[4] = i_length;
		if (i_length)
			_data[5] = 0x0;
		if (i_length > 1)
		{
			auto r = i_length + 5;
			fill(_data[6..r], cast(ubyte)0xff); /* stuffing */
		}
	}

	bool has_adaptation() const
	{
		return !!(_data[3] & 0x20);
	}

	ubyte adaptation_length() const @property
	{
		enforce(has_adaptation(), "ts packet has no adaptation field");

		return _data[4];
	}

	void scrambling(ubyte i_scrambling) @property
	{
		_data[3] &= ~0xc0;
		_data[3] |= i_scrambling << 6;
	}

	ubyte scrambling() const @property
	{
		return (_data[3] & 0xc0) >> 6;
	}

	bool is_valid() const
	{
		return _data[0] == 0x47;
	}

	/*****************************************************************************
	 * TS payload
	 *****************************************************************************/
	void pad()
	{
		set_pid(0x1fff);
		set_cc(0);
		set_payload();
		fill(_data[4..$], cast(ubyte)0xff);
	}

	ubyte[] payload()
	{
		if (!has_payload())
			return null;
		if (!has_adaptation())
			return _data[TS_HEADER_SIZE..$];
		return _data[TS_HEADER_SIZE + 1 + adaptation_length()..$];
	}

	const(ubyte)[] payload() const
	{
		if (!has_payload())
			return null;
		if (!has_adaptation())
			return _data[TS_HEADER_SIZE..$];
		return _data[TS_HEADER_SIZE + 1 + adaptation_length()..$];
	}

	ubyte[] section()
	{
		auto payload = payload();

		if (! unitstart)
		{
			return payload;
		}
		return payload[1..$]; /* pointer_field */
	}

	const(ubyte[]) section() const
	{
		auto payload = payload();

		if (! unitstart)
		{
			return payload;
		}
		return payload[1..$]; /* pointer_field */
	}

	const(AdaptationField) af() const @property
	{
        enforce(has_adaptation, "ts packet has no adaptation field");
        enforce(adaptation_length > 0, "ts packet has zero adaptation field");

		return this.new const(AdaptationField);
	}

	AdaptationField af() @property
	{
        enforce(has_adaptation, "ts packet has no adaptation field");
        enforce(adaptation_length > 0, "ts packet has zero adaptation field");

		return this.new AdaptationField;
	}

	//ubyte[] next_section()
	//{
	//	if (!get_unitstart(_data))
	//		return null;

	//	auto p_payload = payload(_data);

	//	if (p_payload == null)
	//		return null;

	//	return p_payload[p_payload[0] + 1..; /* pointer_field */
	//}

	// const ubyte *section_const( const TsPacket _data)
	// {
	//	if (!get_unitstart(_data))
	//		return payload_const(_data);
	//
	//	return payload_const(_data) + 1; /* pointer_field */
	// }
	//
	// const ubyte *next_section_const( const TsPacket _data)
	// {
	//	const ubyte *p_payload;
	//
	//	if (!get_unitstart(_data))
	//		return _data + SIZE;
	//	p_payload = payload_const(_data);
	//	if (p_payload >= _data + SIZE)
	//		return _data + SIZE;
	//
	//	return p_payload + *p_payload + 1; /* pointer_field */
	// }

	/*****************************************************************************
	 * Adaptation field
	 *****************************************************************************/

	class AdaptationField
	{
		void set_discontinuity()
		{
			_data[5] |= 0x80;
		}

		bool discontinuity() const @property
		{
			return !!(_data[5] & 0x80);
		}

		void set_random_access()
		{
			_data[5] |= 0x40;
		}

		bool random_access() const @property
		{
			return !!(_data[5] & 0x40);
		}

		void pcr(uint64_t i_pcr) @property
		{
			_data[5] |= 0x10;
			_data[6] = (i_pcr >> 25) & 0xff;
			_data[7] = (i_pcr >> 17) & 0xff;
			_data[8] = (i_pcr >> 9) & 0xff;
			_data[9] = (i_pcr >> 1) & 0xff;
			_data[10] = 0x7e | ((i_pcr << 7) & 0x80);
			_data[11] = 0;
		}

		void pcrext(uint16_t i_pcr_ext) @property
		{
			_data[10] |= (i_pcr_ext >> 8) & 0x1;
			_data[11] = i_pcr_ext & 0xff;
		}

		bool has_pcr() const
		{
			return !!(_data[5] & 0x10);
		}

		uint64_t pcr() const @property
		{
			enforce(has_pcr());

			return (cast(uint64_t) _data[6] << 25) | (_data[7] << 17) | (_data[8] << 9) | (_data[9] << 1) |
					 (_data[10] >> 7);
		}

		uint64_t pcrext() const @property
		{
			return ((_data[10] & 1) << 8) | _data[11];
		}
	}

	/*****************************************************************************
	 * TS payload gathering
	 *****************************************************************************/
	static bool check_duplicate(ubyte i_cc, ubyte i_last_cc)
	{
		return i_last_cc == i_cc;
	}

	static bool check_discontinuity(ubyte i_cc, ubyte i_last_cc)
	{
		return (i_last_cc + 17 - i_cc) % 16 != 0;
	}

}

unittest
{
	immutable ubyte[][] packets = [
		[0x47, 0x40, 0x0, 0x17, 0x0, 0x0, 0xb0, 0xd, 0x0, 0x1, 0xc1, 0x0, 0x0, 0x0, 0x1, 0xf0, 0x0, 0x2a, 0xb1, 0x4, 0xb2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,0xff],
		[0x47, 0x50, 0x0, 0x17, 0x0, 0x2, 0xb0, 0x17, 0x0, 0x1, 0xc1, 0x0, 0x0, 0xe1, 0x0, 0xf0, 0x0, 0x1b, 0xe1, 0x0, 0xf0, 0x0, 0xf, 0xe1, 0x1, 0xf0, 0x0, 0x2f, 0x44, 0xb9, 0x9b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,0xff],
		[0x47, 0x41, 0x0, 0x34, 0x7, 0x50, 0xff, 0x73, 0x40, 0xc4, 0x7e, 0x0, 0x0, 0x0, 0x1, 0xe0, 0x65, 0xfe, 0x80, 0xc0, 0xa, 0x3f, 0xfb, 0x9f, 0x27, 0x81, 0x1f, 0xfb, 0x9d, 0xef, 0x41, 0x0, 0x0, 0x0, 0x1, 0x9, 0xf0, 0x0, 0x0, 0x0, 0x1, 0x67, 0x4d, 0x40, 0x29, 0xec, 0xa0, 0x5a, 0x9, 0x37, 0xfe, 0x0, 0x20, 0x0, 0x1e, 0x20, 0x0, 0x0, 0x3, 0x0, 0x20, 0x0, 0x0, 0x6, 0x41, 0xe3, 0x6, 0x32, 0xc0, 0x0, 0x0, 0x0, 0x1, 0x68, 0xef, 0x9f, 0x20, 0x0, 0x0, 0x1, 0x65, 0x88, 0x82, 0x0, 0x27, 0xb7, 0x95, 0x55, 0x64, 0x0, 0xf5, 0x2f, 0xfc, 0x25, 0x45, 0xfd, 0xfd, 0x9a, 0x3a, 0x33, 0x6b, 0x4f, 0xa5, 0x46, 0x9f, 0x73, 0x5b, 0x27, 0x48, 0x80, 0x0, 0x0, 0x3, 0x0, 0x0, 0x3, 0x0, 0x0, 0x3, 0x0, 0x3f, 0x7, 0x4d, 0x58, 0xf2, 0xe9, 0x48, 0x8f, 0xc8, 0x0, 0x0, 0x3, 0x0, 0x22, 0x60, 0x68, 0x2e, 0xe, 0x6b, 0x8e, 0x86, 0x89, 0x9, 0x1a, 0x90, 0x96, 0x0, 0x70, 0x8a, 0xb5, 0x78, 0xc1, 0x2e, 0x30, 0x10, 0x28, 0xf4, 0x92, 0x86, 0x64, 0x61, 0xa7, 0x1f, 0x6b, 0x76, 0xa6, 0x2b, 0x28, 0xe0, 0x62, 0xe, 0xce, 0xfb, 0xd3, 0x16, 0xd5, 0xea, 0xb1, 0x87, 0x69, 0xdf, 0xbd, 0x81, 0x4b, 0x17, 0x9e, 0x4f,0x23],
		[0x47, 0x1, 0x0, 0x15, 0xb1, 0x5b, 0x25, 0x42, 0x86, 0x47, 0x12, 0x40, 0x39, 0xd2, 0x46, 0xac, 0xae, 0x54, 0xba, 0x6a, 0x6e, 0xee, 0xe9, 0x17, 0xb3, 0xde, 0x81, 0x3, 0x69, 0xba, 0xc1, 0x86, 0x5b, 0xa4, 0x97, 0x4c, 0x4f, 0xfb, 0xf4, 0xbf, 0x34, 0xcc, 0x8d, 0xa6, 0x21, 0xf4, 0x82, 0x19, 0x58, 0x1b, 0x9a, 0xd5, 0xbe, 0xa, 0x12, 0x90, 0xaa, 0x9d, 0xec, 0x64, 0x2, 0xa8, 0x14, 0x4b, 0xb7, 0x46, 0xcd, 0x97, 0xd1, 0x12, 0xd4, 0x22, 0x65, 0xd8, 0xce, 0x3d, 0x90, 0x8f, 0x65, 0x76, 0xe0, 0xf4, 0x88, 0xe3, 0xcc, 0x14, 0xce, 0xd8, 0xe3, 0x41, 0x54, 0x74, 0x1b, 0xe2, 0x4e, 0x32, 0x89, 0x62, 0x86, 0xaf, 0xbf, 0x4d, 0xec, 0xac, 0x9b, 0x69, 0x6a, 0x27, 0xe8, 0x6b, 0x35, 0x2f, 0x65, 0x24, 0x99, 0x48, 0x75, 0xb1, 0xe1, 0x38, 0xed, 0x41, 0x6f, 0xef, 0x35, 0xf8, 0x48, 0x4e, 0xb8, 0x6, 0x7, 0x52, 0x14, 0xb7, 0xe4, 0x98, 0x3, 0x63, 0x7d, 0xd0, 0xbd, 0x8d, 0x97, 0x7e, 0x2d, 0xf6, 0xbf, 0xf, 0x7a, 0xba, 0x7d, 0x4b, 0xe2, 0x9, 0xea, 0x99, 0x10, 0x19, 0xbb, 0x44, 0x9b, 0xbb, 0x3a, 0xdb, 0x1e, 0xaa, 0x8a, 0xc9, 0xf, 0x77, 0xc8, 0xef, 0xac, 0xfa, 0x8d, 0x7c, 0x9e, 0x8f, 0xfc, 0x75, 0xf7, 0x50, 0xa7, 0xdf, 0x6, 0x7b, 0x96,0x80],
		/*
		[0x47, 0x1, 0x0, 0x16, 0x69, 0x59, 0x8, 0x85, 0x2c, 0x78, 0xd7, 0xb, 0xc, 0x30, 0x4d, 0x60, 0xf2, 0x36, 0xe, 0xc, 0x5e, 0x83, 0xee, 0x67, 0xe6, 0x75, 0xeb, 0x6e, 0x27, 0x16, 0xaf, 0x17, 0xf7, 0x38, 0x4b, 0x28, 0x77, 0x9a, 0xbb, 0x54, 0xed, 0x5f, 0x87, 0x41, 0x99, 0xe2, 0xcf, 0x91, 0xb5, 0x86, 0x45, 0xe9, 0xd8, 0xea, 0x6f, 0xb0, 0xda, 0x4e, 0xf0, 0x5f, 0xf7, 0xcd, 0x54, 0xf1, 0x4b, 0x50, 0xa0, 0x6e, 0x8e, 0x83, 0xa9, 0x33, 0xa3, 0xb7, 0x3, 0xcf, 0x75, 0x14, 0xe, 0x67, 0x6d, 0xf0, 0x1c, 0x59, 0x49, 0xb5, 0xbd, 0x1a, 0x66, 0x5, 0x75, 0x21, 0xeb, 0x35, 0x51, 0x7a, 0xe2, 0x68, 0x6d, 0x9e, 0xd8, 0xc8, 0x88, 0x97, 0xa8, 0xc5, 0x40, 0x48, 0x1a, 0xbe, 0xf, 0x50, 0x97, 0x42, 0x1d, 0x25, 0xc6, 0xf5, 0xb3, 0x30, 0xcc, 0xa1, 0x15, 0x27, 0x63, 0xcc, 0x72, 0x1e, 0x7f, 0xd5, 0x52, 0x1b, 0x1e, 0x73, 0x87, 0x91, 0x53, 0x48, 0xb4, 0x55, 0x11, 0xe6, 0x8d, 0x62, 0x3b, 0xf1, 0x3f, 0xdf, 0x6b, 0x24, 0xad, 0xc5, 0x2a, 0xc0, 0x59, 0x5c, 0x95, 0x36, 0x7b, 0xff, 0x7d, 0x56, 0xa7, 0x69, 0xc4, 0xdb, 0xe3, 0x94, 0x6a, 0x66, 0xb2, 0x81, 0xe7, 0x92, 0x8c, 0x10, 0xfa, 0x29, 0xb4, 0xec, 0x32, 0xb2, 0xab, 0x31, 0x37, 0xe8, 0x7d,0x90],
		[0x47, 0x1, 0x0, 0x17, 0xe6, 0x1c, 0xa9, 0x12, 0x7b, 0x1b, 0x50, 0x1b, 0x98, 0x99, 0xba, 0x83, 0xa2, 0x58, 0xde, 0x23, 0x9a, 0xdd, 0x6d, 0x57, 0xc7, 0xf9, 0x92, 0xec, 0xc2, 0x94, 0xed, 0xc1, 0x68, 0xea, 0x7d, 0xbb, 0x90, 0x79, 0xd1, 0x9e, 0xa3, 0xac, 0x91, 0x7b, 0xd4, 0x78, 0x47, 0x1c, 0xdd, 0x55, 0x62, 0x97, 0x43, 0x3, 0x48, 0xb8, 0xd9, 0x1d, 0x6a, 0xbe, 0xe8, 0x3a, 0xfd, 0x20, 0xea, 0x53, 0x95, 0xbc, 0x48, 0x42, 0x95, 0xa1, 0xe4, 0xc4, 0xae, 0xe5, 0xe8, 0x74, 0xe8, 0x24, 0xe8, 0x97, 0x91, 0xfb, 0xd0, 0x11, 0x48, 0x26, 0x83, 0xb3, 0x9a, 0x65, 0x8b, 0x4d, 0xa6, 0x5b, 0x17, 0x30, 0x8d, 0x3f, 0xc, 0x6c, 0x3a, 0xea, 0x25, 0xc1, 0xfe, 0x29, 0x91, 0xf1, 0x9f, 0x62, 0x6c, 0xf9, 0x6e, 0xbd, 0xf2, 0x72, 0x99, 0x55, 0x25, 0x1d, 0x6b, 0xd0, 0x87, 0xb7, 0x84, 0xf4, 0xbf, 0xa5, 0xbd, 0x32, 0xff, 0xfa, 0x92, 0x89, 0x46, 0xcb, 0x35, 0x7d, 0x49, 0x1b, 0x6f, 0x17, 0x59, 0xd8, 0x45, 0x87, 0xbe, 0xbb, 0x1f, 0x67, 0xae, 0x78, 0xef, 0xfc, 0xd0, 0x11, 0x53, 0x7b, 0x33, 0x35, 0xda, 0x71, 0x1f, 0x29, 0x3f, 0x58, 0xf5, 0x2c, 0x4e, 0x42, 0xda, 0x52, 0x36, 0x15, 0xa2, 0x3b, 0x54, 0x69, 0x36, 0x9f, 0x58, 0x30, 0xe1, 0xa5, 0x41,0xb8],
		[0x47, 0x1, 0x0, 0x18, 0xab, 0x72, 0xbb, 0x28, 0x3, 0x58, 0x55, 0x1f, 0x68, 0x4a, 0x56, 0xa4, 0x4d, 0x2b, 0x48, 0x83, 0x4d, 0x6d, 0x2c, 0x43, 0xc7, 0x32, 0x23, 0xff, 0xe2, 0x20, 0xa6, 0x4d, 0x47, 0x16, 0x62, 0x20, 0x21, 0x44, 0x1f, 0x9b, 0xfc, 0x47, 0xd5, 0xf8, 0x77, 0xa4, 0xb8, 0x14, 0xa9, 0x27, 0x58, 0xf1, 0x11, 0x56, 0xfa, 0x80, 0x98, 0x2a, 0xc0, 0x43, 0x4e, 0x53, 0xd3, 0x11, 0xb, 0xc5, 0x4f, 0x84, 0xca, 0x37, 0xd1, 0x14, 0x84, 0x3c, 0xca, 0xe2, 0x24, 0xd, 0x8, 0x12, 0x59, 0xb7, 0xe4, 0xe9, 0xe9, 0xc, 0x9d, 0x19, 0x43, 0xc0, 0x87, 0xcd, 0xaf, 0x97, 0xbe, 0x76, 0x5a, 0xad, 0x8a, 0xfc, 0xf6, 0x98, 0xd5, 0x12, 0xc4, 0x35, 0x67, 0x67, 0x23, 0x39, 0x7b, 0x93, 0xa5, 0xf9, 0xbe, 0x9c, 0x7b, 0xc0, 0xfb, 0x90, 0x3b, 0x30, 0xfc, 0x52, 0x1, 0x68, 0xfa, 0x98, 0xf, 0xe7, 0x7e, 0x91, 0x3d, 0x5a, 0xc4, 0x49, 0xed, 0xee, 0xc5, 0xf9, 0xbd, 0x2b, 0xf6, 0x89, 0xcb, 0x7d, 0xc6, 0xb2, 0xf9, 0x2b, 0xf4, 0x39, 0x38, 0x21, 0x94, 0x1d, 0x5, 0xf0, 0x12, 0xc3, 0xb4, 0x3a, 0xf, 0x9b, 0xc2, 0x43, 0x8e, 0x69, 0xe9, 0xfd, 0xa, 0xb, 0xab, 0xd4, 0xa3, 0xef, 0x63, 0x5a, 0xfa, 0xd1, 0x2e, 0x78, 0x27, 0xce, 0xc6, 0x91, 0xae,0xbf],
		[0x47, 0x1, 0x0, 0x19, 0x3a, 0x12, 0xc5, 0x9, 0xfa, 0x36, 0x16, 0xa9, 0xa9, 0xcd, 0xe1, 0x4d, 0xde, 0x86, 0xdf, 0xe0, 0x27, 0x4d, 0xae, 0x78, 0x74, 0xd4, 0x72, 0x42, 0x70, 0x68, 0x3e, 0x10, 0xed, 0xbd, 0xc5, 0x27, 0x96, 0xe1, 0x44, 0x8f, 0x2, 0xd6, 0x51, 0x91, 0x9e, 0xc9, 0x70, 0x1d, 0x25, 0x39, 0x8d, 0xcf, 0xcf, 0xa4, 0x3b, 0xfd, 0xd5, 0x45, 0x86, 0x2f, 0xaf, 0xad, 0x9a, 0x94, 0xca, 0xae, 0x22, 0x62, 0xfa, 0x50, 0x81, 0x7e, 0x9b, 0x4, 0x6b, 0x39, 0x37, 0x8, 0x5e, 0x1f, 0xc4, 0x43, 0x3, 0xba, 0x6a, 0x2b, 0xc5, 0xfb, 0x9d, 0x3a, 0x60, 0x20, 0xf1, 0xe1, 0x19, 0x9b, 0x29, 0x3c, 0xba, 0xef, 0x19, 0x80, 0x90, 0xd5, 0x33, 0x84, 0xa5, 0x8a, 0x79, 0x3, 0xf6, 0x3a, 0x71, 0x5a, 0x10, 0x6f, 0xfb, 0x73, 0x58, 0x1b, 0x42, 0x96, 0x7, 0xb, 0x82, 0xd7, 0x58, 0xa1, 0xed, 0x7e, 0xe9, 0xf4, 0xed, 0xfa, 0x1a, 0xb8, 0xba, 0xc6, 0x9a, 0x4a, 0x5f, 0x26, 0x6a, 0x9a, 0x63, 0xed, 0x43, 0x6e, 0x8b, 0xcf, 0xa4, 0x9a, 0xab, 0x58, 0xf2, 0xa5, 0xcb, 0xb9, 0x8b, 0x4, 0x1c, 0x93, 0x62, 0xbc, 0xc4, 0x16, 0xdf, 0x27, 0xfa, 0xaf, 0xf0, 0xab, 0x61, 0x6a, 0xa4, 0xdb, 0xa8, 0x32, 0x84, 0x95, 0x7, 0x33, 0xce, 0xe8, 0x1a, 0x3c, 0xd9,0xee],
		[0x47, 0x1, 0x0, 0x1a, 0x46, 0x84, 0xcb, 0xcb, 0x54, 0xc6, 0x86, 0x21, 0xe5, 0xa, 0x53, 0x41, 0x57, 0x96, 0xb2, 0xba, 0x82, 0xf3, 0xd3, 0xac, 0xd, 0x24, 0x3d, 0x7, 0x9, 0x7a, 0x54, 0x2e, 0x60, 0x18, 0x50, 0xf7, 0xa2, 0x68, 0x9, 0x55, 0xe, 0x67, 0xa, 0xd5, 0xc3, 0x68, 0x40, 0xf4, 0x70, 0xd8, 0x24, 0xa3, 0x55, 0x9a, 0xdb, 0x84, 0xb9, 0xb8, 0x20, 0x99, 0x2d, 0x10, 0x23, 0x9b, 0xb5, 0x2, 0x7c, 0x68, 0x94, 0x7b, 0x32, 0x22, 0x84, 0x39, 0x70, 0x5b, 0x34, 0x50, 0xb, 0x98, 0x20, 0xc4, 0x31, 0x8d, 0xb2, 0x7, 0x5, 0x37, 0xa2, 0x4, 0x39, 0xd4, 0xc9, 0x9d, 0x2, 0x5a, 0xda, 0x75, 0xf8, 0xb8, 0x77, 0xcf, 0x48, 0xd, 0xe8, 0xeb, 0x15, 0xaa, 0xa, 0xc4, 0x90, 0x7b, 0x2b, 0xbb, 0xb1, 0xa7, 0x5d, 0xdb, 0xcb, 0xdd, 0x70, 0x8a, 0x2b, 0xb3, 0x24, 0x36, 0x5f, 0xe8, 0xa1, 0x39, 0x86, 0x8b, 0x82, 0xc7, 0x8a, 0xda, 0xb1, 0x6b, 0x3a, 0x6, 0x3d, 0x6f, 0xf8, 0x27, 0xa3, 0xca, 0x82, 0x3e, 0xcc, 0xb7, 0x98, 0x73, 0x19, 0x56, 0x3, 0x3c, 0xd4, 0x27, 0xa7, 0x27, 0xe, 0x5f, 0x60, 0x6d, 0x2c, 0xfd, 0x40, 0xc1, 0xe6, 0x65, 0xa0, 0x65, 0x37, 0xf1, 0x45, 0xd5, 0x8d, 0x74, 0x2c, 0x1d, 0x79, 0xb2, 0x4b, 0x47, 0x3a, 0x83, 0x86,0xff],
		[0x47, 0x1, 0x0, 0x1b, 0x6a, 0xb7, 0xa9, 0x4a, 0xc6, 0x76, 0x3, 0x34, 0x6c, 0xcd, 0x66, 0xf, 0x83, 0xca, 0x78, 0xe7, 0xa5, 0x8f, 0xd, 0xc2, 0x23, 0xd4, 0xc, 0x3b, 0x1, 0x46, 0x97, 0x43, 0x9f, 0x8e, 0x3f, 0xd, 0x77, 0xc1, 0x6c, 0x8f, 0xaf, 0xc8, 0x2b, 0x62, 0xa7, 0x1d, 0x59, 0xc, 0x4c, 0xa7, 0x77, 0x7e, 0xe1, 0x50, 0xcc, 0x9f, 0x2e, 0x87, 0xa8, 0x52, 0x4e, 0x69, 0xea, 0x44, 0x9b, 0x49, 0xa8, 0xb1, 0x73, 0xd3, 0xa8, 0xc2, 0x2d, 0xc0, 0xde, 0x6c, 0x79, 0x7a, 0x98, 0x60, 0x71, 0xf, 0x7f, 0xa2, 0x89, 0x14, 0x7a, 0x1b, 0xd0, 0xf0, 0x6f, 0x77, 0x98, 0x2d, 0xdd, 0x76, 0xa, 0x7d, 0xb, 0x55, 0x57, 0x7e, 0xdd, 0x51, 0x8e, 0x10, 0x67, 0x39, 0x4d, 0xc3, 0xa3, 0x8c, 0xf, 0x2b, 0xfa, 0xf0, 0x47, 0xa, 0x79, 0x4d, 0xd, 0x73, 0xdc, 0x4e, 0x27, 0xbd, 0x38, 0x21, 0x6c, 0xcb, 0x48, 0x17, 0x62, 0x1a, 0x70, 0x76, 0xe3, 0xf3, 0x99, 0xb8, 0x82, 0xfc, 0x73, 0x7d, 0x58, 0x38, 0x5d, 0x79, 0x99, 0x9b, 0x2e, 0x45, 0xb3, 0x69, 0x70, 0xcc, 0x3e, 0xc3, 0xb4, 0xa5, 0x81, 0xf0, 0x15, 0xbe, 0xe4, 0x7a, 0x80, 0x2f, 0xba, 0xd4, 0xdf, 0x28, 0x6c, 0xdd, 0x24, 0x4e, 0xa6, 0xfe, 0x56, 0x20, 0x7f, 0x17, 0x9c, 0xd8, 0x3a, 0x84, 0xdc,0xe2]
		*/
	];

	struct Ref
	{
		uint16_t pid;
		uint8_t cc;
		bool unitstart;
		bool transporterror;
		bool scrambling;
		bool has_adaptation;

		struct Af
		{
			bool random_access;
			bool discontinuity;
			bool has_pcr;
			uint64_t pcr;
			uint64_t pcr_ext;

			void validate(const TsPacket p)
			{
				assert(p.has_adaptation);
				assert(p.af.random_access == random_access);
				assert(p.af.has_pcr == has_pcr);
				assert(p.af.pcr == pcr);
				assert(p.af.pcrext == pcr_ext);
			}
		}

		Af af;

		ubyte[] payload = null;

		void validate(const TsPacket pkt)
		{
			assert(pkt.pid == pid);
			assert(pkt.cc == cc);
			assert(pkt.unitstart == unitstart);
			assert(pkt.transporterror == transporterror);
			assert(pkt.scrambling == scrambling);
			assert(pkt.has_adaptation == has_adaptation);
			assert(pkt.payload == payload);

			if(has_adaptation)
			{
				af.validate(pkt);
			}

		}
	}

	Ref[] refs = [
		{pid:0,unitstart:true,cc : 7, payload : [0x0, 0x0, 0xb0, 0xd, 0x0, 0x1, 0xc1, 0x0, 0x0, 0x0, 0x1, 0xf0, 0x0, 0x2a, 0xb1, 0x4, 0xb2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,0xff]},
		{pid:4096,unitstart:true,cc : 7, payload : [0x0, 0x2, 0xb0, 0x17, 0x0, 0x1, 0xc1, 0x0, 0x0, 0xe1, 0x0, 0xf0, 0x0, 0x1b, 0xe1, 0x0, 0xf0, 0x0, 0xf, 0xe1, 0x1, 0xf0, 0x0, 0x2f, 0x44, 0xb9, 0x9b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,0xff]},
		{pid:256,unitstart:true,cc : 4, has_adaptation : true, af : {random_access: true, has_pcr: true, pcr: 8571486600}, payload : [0x00, 0x00, 0x01, 0xe0, 0x65, 0xfe, 0x80, 0xc0, 0x0a, 0x3f, 0xfb, 0x9f, 0x27, 0x81, 0x1f, 0xfb, 0x9d, 0xef, 0x41, 0x00, 0x00, 0x00, 0x01, 0x09, 0xf0, 0x00, 0x00, 0x00, 0x01, 0x67, 0x4d, 0x40, 0x29, 0xec, 0xa0, 0x5a, 0x09, 0x37, 0xfe, 0x00, 0x20, 0x00, 0x1e, 0x20, 0x00, 0x00, 0x03, 0x00, 0x20, 0x00, 0x00, 0x06, 0x41, 0xe3, 0x06, 0x32, 0xc0, 0x00, 0x00, 0x00, 0x01, 0x68, 0xef, 0x9f, 0x20, 0x00, 0x00, 0x01, 0x65, 0x88, 0x82, 0x00, 0x27, 0xb7, 0x95, 0x55, 0x64, 0x00, 0xf5, 0x2f, 0xfc, 0x25, 0x45, 0xfd, 0xfd, 0x9a, 0x3a, 0x33, 0x6b, 0x4f, 0xa5, 0x46, 0x9f, 0x73, 0x5b, 0x27, 0x48, 0x80, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x00, 0x3f, 0x07, 0x4d, 0x58, 0xf2, 0xe9, 0x48, 0x8f, 0xc8, 0x00, 0x00, 0x03, 0x00, 0x22, 0x60, 0x68, 0x2e, 0x0e, 0x6b, 0x8e, 0x86, 0x89, 0x09, 0x1a, 0x90, 0x96, 0x00, 0x70, 0x8a, 0xb5, 0x78, 0xc1, 0x2e, 0x30, 0x10, 0x28, 0xf4, 0x92, 0x86, 0x64, 0x61, 0xa7, 0x1f, 0x6b, 0x76, 0xa6, 0x2b, 0x28, 0xe0, 0x62, 0x0e, 0xce, 0xfb, 0xd3, 0x16, 0xd5, 0xea, 0xb1, 0x87, 0x69, 0xdf, 0xbd, 0x81, 0x4b, 0x17, 0x9e, 0x4f, 0x23]},
		{pid:256,cc : 5, payload : [0xb1, 0x5b, 0x25, 0x42, 0x86, 0x47, 0x12, 0x40, 0x39, 0xd2, 0x46, 0xac, 0xae, 0x54, 0xba, 0x6a, 0x6e, 0xee, 0xe9, 0x17, 0xb3, 0xde, 0x81, 0x03, 0x69, 0xba, 0xc1, 0x86, 0x5b, 0xa4, 0x97, 0x4c, 0x4f, 0xfb, 0xf4, 0xbf, 0x34, 0xcc, 0x8d, 0xa6, 0x21, 0xf4, 0x82, 0x19, 0x58, 0x1b, 0x9a, 0xd5, 0xbe, 0x0a, 0x12, 0x90, 0xaa, 0x9d, 0xec, 0x64, 0x02, 0xa8, 0x14, 0x4b, 0xb7, 0x46, 0xcd, 0x97, 0xd1, 0x12, 0xd4, 0x22, 0x65, 0xd8, 0xce, 0x3d, 0x90, 0x8f, 0x65, 0x76, 0xe0, 0xf4, 0x88, 0xe3, 0xcc, 0x14, 0xce, 0xd8, 0xe3, 0x41, 0x54, 0x74, 0x1b, 0xe2, 0x4e, 0x32, 0x89, 0x62, 0x86, 0xaf, 0xbf, 0x4d, 0xec, 0xac, 0x9b, 0x69, 0x6a, 0x27, 0xe8, 0x6b, 0x35, 0x2f, 0x65, 0x24, 0x99, 0x48, 0x75, 0xb1, 0xe1, 0x38, 0xed, 0x41, 0x6f, 0xef, 0x35, 0xf8, 0x48, 0x4e, 0xb8, 0x06, 0x07, 0x52, 0x14, 0xb7, 0xe4, 0x98, 0x03, 0x63, 0x7d, 0xd0, 0xbd, 0x8d, 0x97, 0x7e, 0x2d, 0xf6, 0xbf, 0x0f, 0x7a, 0xba, 0x7d, 0x4b, 0xe2, 0x09, 0xea, 0x99, 0x10, 0x19, 0xbb, 0x44, 0x9b, 0xbb, 0x3a, 0xdb, 0x1e, 0xaa, 0x8a, 0xc9, 0x0f, 0x77, 0xc8, 0xef, 0xac, 0xfa, 0x8d, 0x7c, 0x9e, 0x8f, 0xfc, 0x75, 0xf7, 0x50, 0xa7, 0xdf, 0x06, 0x7b, 0x96, 0x80]}
	];

	assert(refs.length == packets.length);

	for(size_t i=0; i<refs.length; ++i)
	{
		refs[i].validate(new immutable TsPacket(packets[i]));
	}
}
